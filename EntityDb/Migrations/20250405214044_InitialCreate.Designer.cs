// <auto-generated />
using System;
using EntityDb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EntityDb.Migrations
{
    [DbContext(typeof(EntityDb))]
    [Migration("20250405214044_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityDb.UserChatMessages", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatMessage")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("SendDate")
                        .HasColumnType("datetime2");

                    b.HasKey("MessageId");

                    b.HasIndex("ChatId");

                    b.ToTable("UserChatMessages", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserChats", b =>
                {
                    b.Property<Guid>("ChatId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ChatId");

                    b.HasIndex("UserId");

                    b.ToTable("UserChats", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserContacts", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("UserInfoUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "ContactId");

                    b.HasIndex("ContactId");

                    b.HasIndex("UserInfoUserId");

                    b.ToTable("UserContacts", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserInfo", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("UserNickname")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("UserPhoneNumber")
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<DateTime>("UserRegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex("UserNickname")
                        .IsUnique();

                    b.ToTable("UserInfo", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserPassword", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("UserId");

                    b.ToTable("UserPassword", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserPasswordSalt", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("UserId");

                    b.ToTable("UserPasswordSalt", (string)null);
                });

            modelBuilder.Entity("EntityDb.UserChatMessages", b =>
                {
                    b.HasOne("EntityDb.UserChats", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("EntityDb.UserChats", b =>
                {
                    b.HasOne("EntityDb.UserInfo", "UserInfo")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("UserInfo");
                });

            modelBuilder.Entity("EntityDb.UserContacts", b =>
                {
                    b.HasOne("EntityDb.UserInfo", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EntityDb.UserInfo", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityDb.UserInfo", null)
                        .WithMany("IsContactOf")
                        .HasForeignKey("UserInfoUserId");

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityDb.UserPassword", b =>
                {
                    b.HasOne("EntityDb.UserInfo", "User")
                        .WithOne("Password")
                        .HasForeignKey("EntityDb.UserPassword", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityDb.UserPasswordSalt", b =>
                {
                    b.HasOne("EntityDb.UserInfo", "User")
                        .WithOne("PasswordSalt")
                        .HasForeignKey("EntityDb.UserPasswordSalt", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EntityDb.UserChats", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("EntityDb.UserInfo", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Contacts");

                    b.Navigation("IsContactOf");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("PasswordSalt")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
